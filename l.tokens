# grammar token

NEWLINE: \n;
WS: [\t ]+;

STRINGLITERAL: '[^']*' | \"[^\"]*\";
TEMPLATESTRINGLITERAL: `[^`]*`;
DECIMALLITERAL: [0-9]*\.[0-9]+;
INTLITERAL: 0 | [1-9][0-9]*;
OCTALLITERAL: 0[0-9]+;

TYPE: "any" | "number" | "string" | "object" | "interface";

BOOLEAN: "true" | "false";

NULL_LITERAL: "null";
UNDEFINED_LITERAL: "undefined";

KEYWORD:
  "if" | "else" |
  "for" | "while" |
  "const" | "let" | "var" |
  "import" | "export" | "default" | "from" | "as" |
  "public" | "private" | "static" | "async" |
  "new" | "class" | "function" |
  "number" | "object" | "boolean" | "string";

LINE_COMMENT: // ?[^\n]+;
BLOCK_COMMENT: /\*\*?.*?\*/;

REGEXPEXPRESSION: /[^\/]+/[a-z]*;

OPERATOR:
  "=" | "*" | "-" | "+" |
  "+=" | "-=" |
  "<" | ">" | ">=" | "<=" |
  "&&" | "||" | "<<" | ">>" |
  "?" | "??" |
  ":";

SEPARATOR: ";" | "," | "." | "?.";
PARENTHESIS: "(" | ")" | "{" | "}" | "[" | "]";

IDENTIFIER: [a-zA-Z_\$][a-zA-Z0-9]*;
